(**************************************************************************)
(*  Copyright 2014, Sebastien Mondet <seb@mondet.org>                     *)
(*                                                                        *)
(*  Licensed under the Apache License, Version 2.0 (the "License");       *)
(*  you may not use this file except in compliance with the License.      *)
(*  You may obtain a copy of the License at                               *)
(*                                                                        *)
(*      http://www.apache.org/licenses/LICENSE-2.0                        *)
(*                                                                        *)
(*  Unless required by applicable law or agreed to in writing, software   *)
(*  distributed under the License is distributed on an "AS IS" BASIS,     *)
(*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       *)
(*  implied.  See the License for the specific language governing         *)
(*  permissions and limitations under the License.                        *)
(**************************************************************************)

type time = float
type unique_id = string

type path = {kind: [File | Directory]; path: string}

type ssh_host = {
  address: string;
  port: int option;
  user: string option;
  add_ssh_options: string list;
}

type connection = [
  | Localhost
  | Ssh of ssh_host
]

type default_shell = {
  binary: string option;
  command_name: string;
  options: string list;
  command_option: string;
}

type host = {
  name: string;
  connection: connection;
  playground: path option;
  default_shell: default_shell;
  execution_timeout: time option;
}

type volume_structure =  [
  | File of string
  | Directory of (string * volume_structure list)
] <ocaml repr="classic">

type volume = {
  host: host;
  root: path;
  structure: volume_structure;
}

type program = [
  | Shell_command of string
  | Exec of string list
  | And of program list
]

type monitored_script = {
  playground: path;
  program: program;
}


type http_request = {
  connection_id: string;
  meth: [ DELETE | GET | HEAD | OPTIONS | PATCH | POST | PUT | Other of string ];
  uri: string;
}
type response_log = {
  response: string;
  body_length: int;
}
type measurement = [
  | Creation
  | Incoming_request of http_request
  | End_of_request of (http_request * response_log)
  | Tag of string
]
type measurement_item = {
  time: time;
  content: measurement;
}
type measurement_collection = measurement_item list




