(**************************************************************************)
(*  Copyright 2014, Sebastien Mondet <seb@mondet.org>                     *)
(*                                                                        *)
(*  Licensed under the Apache License, Version 2.0 (the "License");       *)
(*  you may not use this file except in compliance with the License.      *)
(*  You may obtain a copy of the License at                               *)
(*                                                                        *)
(*      http://www.apache.org/licenses/LICENSE-2.0                        *)
(*                                                                        *)
(*  Unless required by applicable law or agreed to in writing, software   *)
(*  distributed under the License is distributed on an "AS IS" BASIS,     *)
(*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       *)
(*  implied.  See the License for the specific language governing         *)
(*  permissions and limitations under the License.                        *)
(**************************************************************************)

type time <ocaml from="Ketrew_gen_base_v0.Time"> = abstract
type unique_id <ocaml from="Ketrew_gen_base_v0.Unique_id"> = abstract
type host <ocaml from="Ketrew_gen_base_v0.Host"> = abstract
type program <ocaml from="Ketrew_gen_base_v0.Program"> = abstract
type volume <ocaml from="Ketrew_gen_base_v0.Volume"> = abstract

type command = {
  host: host;
  action: program;
}

type build_process = [
  | No_operation
  | Long_running of (string * string)
]

(*
Encoding of the state of a target:
   
- `run_bookkeeping` keeps the information for the `Long_running` plugin.
- `log` is a time stamped optional log message

Every state point to its previous state through a `'a hitory`. 

We use the subtyping of ATD (hence polymorphic variants) to encode the
state-machine; a given state can come only from certain previous
states, those are enforced with the type-parameter of the `history`
value.

*)
type run_bookkeeping = 
  { plugin_name: string; run_parameters: string }

type log = {
  time: time;
  message: string option;
}
type 'a history = {
  log: log;
  previous_state: 'a;
}
type passive = [ Passive of log ]
type active = [ Active of (passive history * [ User | Dependency of id ]) ]

type evaluating_condition = [
  | inherit active
  | Tried_to_eval_condition of evaluating_condition history
]

type already_done = [ Already_done of evaluating_condition history ]

type building = [ Building of evaluating_condition history
                | Still_building of building history  ]

type dependency_failure = [
  | Dependencies_failed of (building history * id list)
]

type starting = [
  | Starting of building history
  | Tried_to_start of (starting history * run_bookkeeping)
]

type failed_to_start = [
  | Failed_to_eval_condition of evaluating_condition history
  | Failed_to_start of (starting history * run_bookkeeping)
]

type running = [
  | Started_running of (starting history * run_bookkeeping)
  | Still_running  of (running history * run_bookkeeping)
]

(*
Successful run is the success of the process, we still have to verify
that the potential condition has been ensured.
*)
type successful_run = [
  | Successfully_did_nothing of starting history
  | Ran_successfully of (running history * run_bookkeeping)
]


type process_failure_reason = [
  (* | Did_not_ensure_condition of string *)
  | Long_running_failure of string
]
type failed_run = [
  | Failed_running of
      (running history * process_failure_reason * run_bookkeeping)
]

type verified_run = [
  | Verified_success of successful_run history
]
type failed_to_verify_success = [
  | Did_not_ensure_condition of successful_run history
]

type killable_state = [
  | inherit passive
  | inherit evaluating_condition
  | inherit building
  | inherit starting
  | inherit running
]

type killing = [
  | Killing of killable_state history
  | Tried_to_kill of killing history
]
type killed = [
  | Killed of killing history
]
type failed_to_kill = [
  | Failed_to_kill of killing history
]
  
type finishing_state = [
  | inherit failed_run
  | inherit verified_run
  | inherit already_done
  | inherit dependency_failure
  | inherit failed_to_start
  | inherit killed
  | inherit failed_to_kill
  | inherit failed_to_verify_success
]

type finished = [
  | Finished of finishing_state history
]

type state = [
  | inherit killing
  | inherit killed
  | inherit killable_state
  | inherit successful_run
  | inherit finishing_state
  | inherit finished
]

type condition = [
  | TTrue
  | FFalse
  | Volume_exists of volume
  | Volume_size_bigger_than of (volume * int)
  | Command_returns of (command * int)
  | And of condition list
]

type equivalence = [
  | None
  | Same_active_condition
]

type id = unique_id
type target = {
  id: id;
  name: string;
  metadata: [String of string] option;
  dependencies: id list;
  if_fails_activate: id list;
  success_triggers: id list;
  make: build_process;
  condition: condition option;
  equivalence: equivalence;
  history: state;
  log: (time * string) list;
  tags: string list;
}

type target_pointer = {
  original: target;
  pointer: id;
}

type stored_target = [
  | Target of target
  | Pointer of target_pointer
]
